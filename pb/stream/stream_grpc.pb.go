// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	TrackScore(ctx context.Context, opts ...grpc.CallOption) (StreamService_TrackScoreClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) TrackScore(ctx context.Context, opts ...grpc.CallOption) (StreamService_TrackScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/stream.StreamService/TrackScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceTrackScoreClient{stream}
	return x, nil
}

type StreamService_TrackScoreClient interface {
	Send(*PlayerScoreEvent) error
	CloseAndRecv() (*PlayerScore, error)
	grpc.ClientStream
}

type streamServiceTrackScoreClient struct {
	grpc.ClientStream
}

func (x *streamServiceTrackScoreClient) Send(m *PlayerScoreEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceTrackScoreClient) CloseAndRecv() (*PlayerScore, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PlayerScore)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	TrackScore(StreamService_TrackScoreServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) TrackScore(StreamService_TrackScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method TrackScore not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_TrackScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).TrackScore(&streamServiceTrackScoreServer{stream})
}

type StreamService_TrackScoreServer interface {
	SendAndClose(*PlayerScore) error
	Recv() (*PlayerScoreEvent, error)
	grpc.ServerStream
}

type streamServiceTrackScoreServer struct {
	grpc.ServerStream
}

func (x *streamServiceTrackScoreServer) SendAndClose(m *PlayerScore) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceTrackScoreServer) Recv() (*PlayerScoreEvent, error) {
	m := new(PlayerScoreEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrackScore",
			Handler:       _StreamService_TrackScore_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
